{"version":3,"sources":["../../src/server/services/oauth2.js"],"names":["user","database","db","memberships","memberOf","length","collection","find","alternateName","$in","toArray","organizations","console","log","req","res","findOne","username","body","argon2","verify","password","isValid","name","person","policy","generateToken","accessToken","expiresIn","insert","type","token","write","JSON","stringify","access_token","token_type","expires_in","end","passwordGrant","grant_type","hash","document_id","register","update","renew","resetPassword","receivedToken","headers","bearer","data","setHeader","validateToken","mongoConnection","MONGO_URL","Promise","resolve","connect","then","connection","size","reject","err","buffer","toString","replace"],"mappings":"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","file":"oauth2.js","sourcesContent":["import { randomBytes } from 'crypto';\nimport * as argon2 from 'argon2';\nimport { MongoClient } from 'mongodb';\n\nimport gateway from '../gateway';\n\nlet mongoConnection;\nconst MONGO_URL = 'mongodb://localhost:27017/tdd2';\n\n/**\n * @returns {Promise} the promise of a database connection\n */\nfunction database() {\n  if (mongoConnection) { return Promise.resolve(mongoConnection); }\n  return MongoClient.connect(MONGO_URL).then((connection) => {\n    mongoConnection = connection;\n    return Promise.resolve(mongoConnection);\n  });\n}\n\n/**\n * Generate a token\n * @param {*} size the length of the token\n * @returns {Promise} the promise of the token\n */\nfunction generateToken(size) {\n  return new Promise((resolve, reject) => {\n    randomBytes(size, (err, buffer) => {\n      if (err) { return reject(err); }\n      return resolve(buffer.toString('base64').replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_'));\n    });\n  });\n}\n\n/**\n * all the memberships of this user\n * @param {object} user the Person or Organization object\n * @returns {array} the list organizations\n */\nasync function memberOf(user) {\n  const db = await database();\n  const memberships = [];\n  if (user.memberOf && user.memberOf.length > 0) {\n    const organizations = await db.collection('documents').find({ alternateName: { $in: user.memberOf } }).toArray();\n    console.log(organizations);\n  }\n  return memberships;\n}\n\n/**\n * The Oauth2 password grant procedure\n * @param {*} req the request object\n * @param {*} res the response object\n * @returns {Promise} the of a grant\n */\nasync function passwordGrant(req, res) {\n  const db = await database();\n  // verify user\n  const user = await db.collection('users').findOne({ username: req.body.username });\n\n  if (!user) {\n    throw 'user password combination not found';\n  }\n\n  const isValid = await argon2.verify(user.password, req.body.password);\n\n  if (!isValid) {\n    throw 'invalid password';\n  }\n\n  // resolve the corresponding Person\n  // BE CAREFUL THIS BYPASSES SECURITY!\n  const person = await db.collection('documents').find({ alternateName: user.name });\n\n  // resolve Organizations\n  // BE CAREFUL THIS BYPASSES SECURITY!\n  const policy = await memberOf(person);\n\n  // generate tokens\n  const accessToken = await generateToken(48);\n  const expiresIn = 3600;\n\n  // store the tokens\n  await db.collection('tokens').insert({ type: 'access_token', token: accessToken, policy });\n\n  // todo generate an access token / refresh token\n  res.write(JSON.stringify({\n    access_token: accessToken,\n    token_type: 'Bearer',\n    expires_in: expiresIn,\n  }));\n  res.end();\n  return true;\n}\n\n/**\n * Oauth2 token service\n * @param {*} req the request object\n * @param {*} res the response object\n * @returns {Promise} the promise of a token\n */\nasync function token(req, res) {\n  switch (req.body.grant_type) {\n    case 'password': return passwordGrant(req, res);\n    default:\n      throw 'grant_type not allowed';\n  }\n}\n\n/**\n * Register a new user\n * @param {*} req the request object\n * @param {*} res the response object\n * @returns {Promise} the promise of a registered user\n */\nasync function register(req, res) {\n  const db = database();\n\n  const password = await argon2.hash(req.body.password);\n\n  await db.collection('users').insert({ document_id, username: req.body.username, password });\n}\n\n/**\n * Reset the password of a given user\n * @param {*} req the request object\n * @param {*} res the response object\n * @returns {Promise} the promise of a resetted password\n */\nasync function resetPassword(req, res) {\n  const db = await database();\n\n  // TODO generate a temporary authentication token with a short lifetime\n\n  // set a flag to create a new password\n  await db.collection('users').update({ username: req.body.username }, { renew: true });\n  return true;\n}\n\n/**\n * Validate a send token and append the token data\n * @param {*} req the request object\n * @param {*} res the response object\n * @returns {Promise} the promise of a validated token\n */\nasync function validateToken(req, res) {\n  const receivedToken = req.headers.bearer;\n  if (!receivedToken) { return true; }\n  try {\n    const db = await database();\n    const token = await db.collection('tokens').find({ type: 'access_token', token: receivedToken });\n  } catch (err) {\n    // TODO if token not found throw error\n  }\n  // TODO check expiration\n\n  req.user = token.data;\n\n  // set the cache control header to private\n  res.setHeader('cache-control', 'private');\n  return true;\n}\n\ngateway.register('router:before', validateToken);\ngateway.register('oauth2.token:create', token);\n\ndatabase();\n"]}