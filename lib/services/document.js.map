{"version":3,"sources":["../../src/server/services/document.js"],"names":["mongoConnection","MONGO_URL","EVERYBODY_AUDIENCE","GUEST_AUDIENCE","db","Promise","resolve","connect","then","connection","createDocument","req","res","conn","insert","input","getMemberships","user","memberships","concat","readDocument","query","potentialAction","$elemMatch","_type","agent","$in","collection","find","toArray","items","setHeader","length","write","JSON","stringify","end","updateDocument","_id","shared","update","deleteDocument","remove","register"],"mappings":";;AAAA;;AACA;;;;;;AAEA,IAAIA,wBAAJ;AACA,IAAMC,YAAY,gCAAlB;AACA,IAAMC,qBAAqB,WAA3B;AACA,IAAMC,iBAAiB,QAAvB;;AAEA;;;AAGA,SAASC,EAAT,GAAc;AACZ,MAAIJ,eAAJ,EAAqB;AAAE,WAAOK,QAAQC,OAAR,CAAgBN,eAAhB,CAAP;AAA0C;AACjE,SAAO,qBAAYO,OAAZ,CAAoBN,SAApB,EAA+BO,IAA/B,CAAoC,UAACC,UAAD,EAAgB;AACzDT,sBAAkBS,UAAlB;AACA,WAAOJ,QAAQC,OAAR,CAAgBN,eAAhB,CAAP;AACD,GAHM,CAAP;AAID;;AAED;;;;;;AAMA,SAASU,cAAT,CAAwBC,GAAxB,EAA6BC,GAA7B,EAAkC;AAChCR,OAAKI,IAAL,CAAU,UAACK,IAAD,EAAU;AAClB;;AAEA;AACAA,SAAKC,MAAL,CAAYH,IAAII,KAAhB;AACD,GALD;AAMD;;AAED;;;;;AAKA,SAASC,cAAT,CAAwBL,GAAxB,EAA6B;AAC3B,MAAIA,IAAIM,IAAJ,IAAYN,IAAIM,IAAJ,CAASC,WAAzB,EAAsC;AACpC,WAAO,CAAChB,kBAAD,EAAqBiB,MAArB,CAA4BR,IAAIM,IAAJ,CAASC,WAArC,CAAP;AACD;AACD,SAAO,CAAChB,kBAAD,EAAqBC,cAArB,CAAP;AACD;;AAED;;;;;;AAMA,SAASiB,YAAT,CAAsBT,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B;AACAD,MAAIU,KAAJ,CAAUC,eAAV,GAA4B,EAAEC,YAAY,EAAEC,OAAO,YAAT,EAAuBC,OAAO,EAAEC,KAAKV,eAAeL,GAAf,CAAP,EAA9B,EAAd,EAA5B;;AAEA;AACA,SAAOP,KAAKI,IAAL,CAAU;AAAA,WAAQK,KAAKc,UAAL,CAAgB,UAAhB,EAA4BC,IAA5B,CAAiCjB,IAAIU,KAArC,EAA4CQ,OAA5C,GAAsDrB,IAAtD,CAA2D,UAACsB,KAAD,EAAW;AAC7FlB,UAAImB,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACA,UAAID,MAAME,MAAN,KAAiB,CAArB,EAAwB;AACtBpB,YAAIqB,KAAJ,CAAUC,KAAKC,SAAL,CAAeL,MAAM,CAAN,CAAf,CAAV;AACD,OAFD,MAEO;AACLlB,YAAIqB,KAAJ,CAAUC,KAAKC,SAAL,CAAeL,KAAf,CAAV;AACD;AACDlB,UAAIwB,GAAJ;AACA,aAAO,IAAP;AACD,KATwB,CAAR;AAAA,GAAV,CAAP;AAUD;;AAED;;;;;;AAMA,SAASC,cAAT,CAAwB1B,GAAxB,EAA6BC,GAA7B,EAAkC;AAChC;AACA;AACA,MAAID,IAAII,KAAJ,CAAUuB,GAAd,EAAmB;AACjB3B,QAAI4B,MAAJ,CAAWnC,EAAX,GAAgBoC,MAAhB,CAAuB,EAAEF,KAAK3B,IAAII,KAAJ,CAAUuB,GAAjB,EAAvB,EAA+C3B,IAAII,KAAnD;AACD;AACF;;AAED;;;;;;AAMA,SAAS0B,cAAT,CAAwB9B,GAAxB,EAA6BC,GAA7B,EAAkC;AAChC;AACAD,MAAI4B,MAAJ,CAAWnC,EAAX,GAAgBsC,MAAhB,CAAuB/B,IAAII,KAA3B;AACD;;AAED,kBAAQ4B,QAAR,CAAiB,iBAAjB,EAAoCjC,cAApC;AACA,kBAAQiC,QAAR,CAAiB,eAAjB,EAAkCvB,YAAlC;AACA,kBAAQuB,QAAR,CAAiB,iBAAjB,EAAoCN,cAApC;AACA,kBAAQM,QAAR,CAAiB,iBAAjB,EAAoCF,cAApC;;AAEA;AACArC","file":"document.js","sourcesContent":["import { MongoClient } from 'mongodb';\nimport gateway from '../gateway';\n\nlet mongoConnection;\nconst MONGO_URL = 'mongodb://localhost:27017/tdd2';\nconst EVERYBODY_AUDIENCE = 'everybody';\nconst GUEST_AUDIENCE = 'guests';\n\n/**\n * @returns {Promise} the promise of a database connection\n */\nfunction db() {\n  if (mongoConnection) { return Promise.resolve(mongoConnection); }\n  return MongoClient.connect(MONGO_URL).then((connection) => {\n    mongoConnection = connection;\n    return Promise.resolve(mongoConnection);\n  });\n}\n\n/**\n * Create a new document in our mongo store\n * @param {*} req the request object\n * @param {*} res the response object\n * @returns {void}\n */\nfunction createDocument(req, res) {\n  db().then((conn) => {\n    // TODO check if it's allowed to insert on this category/group/website\n\n    // check if this user has the permission to create a document\n    conn.insert(req.input);\n  });\n}\n\n/**\n * Returns the memberships of the current user\n * @param {*} req the request object\n * @returns {array} of memberships\n */\nfunction getMemberships(req) {\n  if (req.user && req.user.memberships) {\n    return [EVERYBODY_AUDIENCE].concat(req.user.memberships);\n  }\n  return [EVERYBODY_AUDIENCE, GUEST_AUDIENCE];\n}\n\n/**\n * Read one or multiple documents from the mongo store\n * @param {*} req the request object\n * @param {*} res the response object\n * @returns {void}\n */\nfunction readDocument(req, res) {\n  // add a security bit to the query\n  req.query.potentialAction = { $elemMatch: { _type: 'ReadAction', agent: { $in: getMemberships(req) } } };\n\n  // add to the query a condition to make sure the user only sees what it should see\n  return db().then(conn => conn.collection('document').find(req.query).toArray().then((items) => {\n    res.setHeader('Content-Type', 'application/json');\n    if (items.length === 1) {\n      res.write(JSON.stringify(items[0]));\n    } else {\n      res.write(JSON.stringify(items));\n    }\n    res.end();\n    return true;\n  }));\n}\n\n/**\n * Update an existing document on the mongo store\n * @param {*} req the request object\n * @param {*} res the response object\n * @returns {void}\n */\nfunction updateDocument(req, res) {\n  // TODO check if this user can update the document\n  // add to the query a condition to make sure the user only updates what it can update\n  if (req.input._id) {\n    req.shared.db().update({ _id: req.input._id }, req.input);\n  }\n}\n\n/**\n * Remove a document from the mongo store\n * @param {*} req the request object\n * @param {*} res the response object\n * @returns {void}\n */\nfunction deleteDocument(req, res) {\n  // add to the query a condition to make sure the user only deletes what it can delete\n  req.shared.db().remove(req.input);\n}\n\ngateway.register('document:create', createDocument);\ngateway.register('document:read', readDocument);\ngateway.register('document:update', updateDocument);\ngateway.register('document:delete', deleteDocument);\n\n// setup a database connection\ndb();\n"]}