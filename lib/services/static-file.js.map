{"version":3,"sources":["../../src/server/services/static-file.js"],"names":["fileMimeMap","extMimeMap","staticFile","req","res","Promise","resolve","reject","pathname","url","stat","err","stats","errno","message","isDirectory","fileStream","createReadStream","on","baseName","basename","setHeader","ext","extname","size","error","pipe","register"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,cAAc,EAApB;;AAGA,IAAMC,aAAa;AACjB,UAAQ,cADS;AAEjB,WAAS,WAFQ;AAGjB,SAAO,iBAHU;AAIjB,WAAS,kBAJQ;AAKjB,UAAQ,UALS;AAMjB,UAAQ,WANS;AAOjB,UAAQ,YAPS;AAQjB,UAAQ,eARS;AASjB,UAAQ,iBATS;AAUjB,WAAS,YAVQ;AAWjB,WAAS;AAXQ,CAAnB;;AAcA;;;;;;AAMA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAIC,wBAAsBL,IAAIM,GAAJ,CAAQD,QAAlC;;AAEA,iBAAGE,IAAH,CAAQF,QAAR,EAAkB,UAACG,GAAD,EAAMC,KAAN,EAAgB;AAChC,UAAID,GAAJ,EAAS;AACP,YAAIA,IAAIE,KAAJ,KAAc,CAAC,IAAnB,EAAyB;AACvB,iBAAOP,QAAQ,KAAR,CAAP;AACD;AACD,eAAOC,OAAOI,IAAIG,OAAX,CAAP;AACD;;AAED,UAAIF,MAAMG,WAAN,EAAJ,EAAyB;AACvB;AACAZ,YAAIM,GAAJ,CAAQD,QAAR,IAAoB,YAApB;AACA,eAAON,WAAWC,GAAX,EAAgBC,GAAhB,CAAP;AACD;;AAED;;AAEA,UAAMY,aAAa,aAAGC,gBAAH,CAAoBT,QAApB,CAAnB;AACAQ,iBAAWE,EAAX,CAAc,MAAd,EAAsB,YAAM;AAC1B,YAAMC,WAAW,eAAKC,QAAL,CAAcZ,QAAd,CAAjB;AACA,YAAIR,YAAYmB,QAAZ,CAAJ,EAA2B;AACzBf,cAAIiB,SAAJ,CAAc,cAAd,EAA8BpB,WAAWkB,QAAX,CAA9B;AACD,SAFD,MAEO;AACL,cAAMG,MAAM,eAAKC,OAAL,CAAaf,QAAb,CAAZ;AACAJ,cAAIiB,SAAJ,CAAc,cAAd,EAA8BpB,WAAWqB,GAAX,KAAmB,YAAjD;AACD;AACDlB,YAAIiB,SAAJ,CAAc,gBAAd,EAAgCT,MAAMY,IAAtC;AACD,OATD;AAUAR,iBAAWE,EAAX,CAAc,OAAd,EAAuB,UAACO,KAAD,EAAW;AAChClB,eAAOkB,KAAP;AACD,OAFD;;AAIAT,iBAAWU,IAAX,CAAgBtB,GAAhB;AACA,aAAOE,QAAQ,IAAR,CAAP;AACD,KAjCD;AAkCD,GArCM,CAAP;AAsCD;;AAED,kBAAQqB,QAAR,CAAiB,iBAAjB,EAAoCzB,UAApC","file":"static-file.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport gateway from '../gateway';\n\nconst fileMimeMap = {\n};\n\nconst extMimeMap = {\n  '.ico': 'image/x-icon',\n  '.html': 'text/html',\n  '.js': 'text/javascript',\n  '.json': 'application/json',\n  '.css': 'text/css',\n  '.png': 'image/png',\n  '.jpg': 'image/jpeg',\n  '.svg': 'image/svg+xml',\n  '.pdf': 'application/pdf',\n  '.webp': 'image/webp',\n  '.apng': 'image/apng',\n};\n\n/**\n * Service static files\n * @param {*} req the request object\n * @param {*} res the response object\n * @returns {void}\n */\nfunction staticFile(req, res) {\n  return new Promise((resolve, reject) => {\n    let pathname = `./public${req.url.pathname}`;\n\n    fs.stat(pathname, (err, stats) => {\n      if (err) {\n        if (err.errno === -4058) {\n          return resolve(false);\n        }\n        return reject(err.message);\n      }\n\n      if (stats.isDirectory()) {\n        // alter the request to fetch the index\n        req.url.pathname += 'index.html';\n        return staticFile(req, res);\n      }\n\n      // TODO add static gzip + brotli compression\n\n      const fileStream = fs.createReadStream(pathname);\n      fileStream.on('open', () => {\n        const baseName = path.basename(pathname);\n        if (fileMimeMap[baseName]) {\n          res.setHeader('Content-Type', extMimeMap[baseName]);\n        } else {\n          const ext = path.extname(pathname);\n          res.setHeader('Content-Type', extMimeMap[ext] || 'text/plain');\n        }\n        res.setHeader('Content-Length', stats.size);\n      });\n      fileStream.on('error', (error) => {\n        reject(error);\n      });\n\n      fileStream.pipe(res);\n      return resolve(true);\n    });\n  });\n}\n\ngateway.register('entrypoint:read', staticFile);\n"]}